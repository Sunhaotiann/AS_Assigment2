@page
@model AS_Assigment2.Pages.ChangePasswordModel
@{
    ViewData["Title"] = "Change Password";
}

<div class="container mt-5">
    <h2 class="text-center">Change Password</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <form method="post" id="changePasswordForm">
        <div asp-validation-summary="All" class="text-danger"></div>

        <div class="form-group">
            <label asp-for="ChangePasswordInput.CurrentPassword"></label>
            <input asp-for="ChangePasswordInput.CurrentPassword" class="form-control" type="password" required />
            <span asp-validation-for="ChangePasswordInput.CurrentPassword" class="text-danger"></span>
        </div>

        <!-- New Password Input with Real-time Strength Feedback -->
        <div class="form-group mt-3">
            <label asp-for="ChangePasswordInput.NewPassword"></label>
            <input asp-for="ChangePasswordInput.NewPassword" class="form-control" type="password" id="newPasswordInput" onkeyup="checkPasswordStrength()" required />
            <span asp-validation-for="ChangePasswordInput.NewPassword" class="text-danger"></span>
            <div id="passwordFeedback" style="font-weight: bold;"></div>
        </div>

        <div class="form-group mt-3">
            <label asp-for="ChangePasswordInput.ConfirmPassword"></label>
            <input asp-for="ChangePasswordInput.ConfirmPassword" class="form-control" type="password" required />
            <span asp-validation-for="ChangePasswordInput.ConfirmPassword" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary mt-3">Change Password</button>
    </form>
</div>

@section Scripts {
    <script>
        // Real-time Password Strength Check
        function checkPasswordStrength() {
            let password = document.getElementById("newPasswordInput").value;
            let feedback = document.getElementById("passwordFeedback");

            let strongRegex = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!#\$%\^&\*])(?=.{12,})");
            let mediumRegex = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.{8,})");

            if (strongRegex.test(password)) {
                feedback.textContent = "Strong ✅";
                feedback.style.color = "green";
            } else if (mediumRegex.test(password)) {
                feedback.textContent = "Moderate ⚠️";
                feedback.style.color = "orange";
            } else {
                feedback.textContent = "Weak ❌";
                feedback.style.color = "red";
            }
        }

        // Basic Validation to Prevent XSS in Passwords
        document.getElementById("changePasswordForm").addEventListener("submit", function (e) {
            const newPassword = document.getElementById("newPasswordInput").value;

            if (/[\"><]/.test(newPassword)) {
                alert("Invalid characters in the password.");
                e.preventDefault();
            }
        });
    </script>
}
